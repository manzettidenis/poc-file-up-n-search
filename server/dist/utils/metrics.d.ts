import { register, Counter, Histogram, Gauge } from 'prom-client';
export declare const httpRequestsTotal: Counter<"method" | "route" | "status_code">;
export declare const httpRequestDuration: Histogram<"method" | "route" | "status_code">;
export declare const fileUploadsTotal: Counter<"status" | "file_type">;
export declare const fileUploadSize: Histogram<"file_type">;
export declare const fileUploadDuration: Histogram<"file_type">;
export declare const textExtractionTotal: Counter<"status" | "file_type" | "extraction_type">;
export declare const textExtractionDuration: Histogram<"file_type" | "extraction_type">;
export declare const ocrProcessingTotal: Counter<"language" | "status" | "image_type">;
export declare const ocrProcessingDuration: Histogram<"language" | "image_type">;
export declare const ocrCharactersExtracted: Histogram<"language">;
export declare const ocrWordsExtracted: Histogram<"language">;
export declare const imageProcessingDuration: Histogram<string>;
export declare const searchQueriesTotal: Counter<"status">;
export declare const searchDuration: Histogram<string>;
export declare const searchResultsCount: Histogram<string>;
export declare const activeConnections: Gauge<string>;
export declare const filesInStorage: Gauge<string>;
export declare const totalStorageUsed: Gauge<string>;
export declare const cacheHitRate: Gauge<"cache_type">;
export declare const errorsTotal: Counter<"type" | "category">;
export declare const rateLimitHits: Counter<"endpoint">;
export declare const memoryUsageBytes: Gauge<"type">;
export declare const searchIndexSize: Gauge<string>;
export declare const indexingDuration: Histogram<string>;
export declare class MetricsCollector {
    static recordHttpRequest(method: string, route: string, statusCode: number, duration: number): void;
    static recordFileUpload(status: 'success' | 'failure', fileType: string, size: number, duration: number): void;
    static recordTextExtraction(status: 'success' | 'failure', fileType: string, duration: number, extractionType?: string): void;
    static recordOCRProcessing(status: 'success' | 'failure', language: string, imageType: string, duration: number, charactersExtracted?: number, wordsExtracted?: number): void;
    static recordImageProcessing(duration: number): void;
    static recordSearch(status: 'success' | 'failure', duration: number, resultCount?: number): void;
    static recordError(type: string, category: string): void;
    static updateMemoryMetrics(): void;
    static updateStorageMetrics(fileCount: number, totalSize: number): void;
    static updateCacheMetrics(cacheType: string, hitRate: number): void;
    static updateSearchIndexMetrics(documentCount: number, indexingTime: number): void;
}
export declare const metricsMiddleware: (req: any, res: any, next: any) => void;
export { register };
