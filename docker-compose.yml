version: '3.8'

services:
  # Backend API service
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: file-upload-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - FRONTEND_URL=http://localhost:3000
      - LOG_LEVEL=info
      - MAX_FILE_SIZE=52428800
      - UPLOAD_DIR=uploads
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=1000
      - UPLOAD_RATE_LIMIT_MAX=50
      - SEARCH_RATE_LIMIT_MAX=300
      - REQUEST_LOGGING=true
      - OCR_DEFAULT_LANGUAGE=eng
      - OCR_PREPROCESSING=true
    volumes:
      - backend_uploads:/app/uploads
      - backend_data:/app/data
      - backend_logs:/app/logs
    networks:
      - file-upload-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health/live', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend web service
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: file-upload-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - file-upload-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: file-upload-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - file-upload-network
    profiles:
      - monitoring

  # Grafana dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: file-upload-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - file-upload-network
    profiles:
      - monitoring

volumes:
  backend_uploads:
    driver: local
  backend_data:
    driver: local
  backend_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  file-upload-network:
    driver: bridge 